#summary Configure the rights policy
<h1>How to configure the rights policy<h1>

= Introduction =

The rights policy are currently "HardCoded". Nevertheless, many rights policy have been developed and can be used.
It's quite simple: you just have to change the java class used in the basic config file (cf [BasicConfigurationOfTheModule] property *OSWORKFLOWMANAGER_CLASSNAME*)

= Details =

== The developed policy ==

According to the value set for property OSWORKFLOWMANAGER_CLASSNAME, you will had different right management behaviour :

  * *com.eurelis.opencms.workflows.workflows.OSWorkflowManager* : This implementation doesn't take care of access right on workflows.
  * *com.eurelis.opencms.workflows.workflows.OSWorkflowManagerWithRightManagement* : 
    * If there is no file attached to the WF, the rights applied are those of NO_FILES branch.
    * The creator of a workflow always has read rights on his workflow.
    * The other users follow the rule define statically in the config file.
  * *com.eurelis.opencms.workflows.workflows.OSWorkflowManagerWithRightManagementAndOwnerForbidden* : 
    * If there is no file attached to the WF, the rights applied are those of NO_FILES branch.
    * The creator of a workflow always has read rights on his workflow.
    * The creator of a workflow never has write rights on his workflow.
    * The other users follow the rule define statically in the config file.
  * *com.eurelis.opencms.workflows.workflows.OSWorkflowManagerWithDynamicRightManagement* :
    * If there is no file attached to the WF, the rights applied are those of NO_FILES branch.
    * The creator of a workflow always has read rights on his workflow.
    * The creator of a workflow never has write rights on his workflow.
    * The other users follow the rule define statically in the config file.
    * If there is allowed people define for the instance of workflow, this one take priority on rights statically defined. This dynamic right system is only use to calculate write access.
    
The default value of the property is _com.eurelis.opencms.workflows.workflows.OSWorkflowManagerWithDynamicRightManagement_

== Add more policy ==

All the policy extends the abstract class *com.eurelis.opencms.workflows.workflows.A_OSWorkflowManager*. You can add your own policy by creating your own implementation of the class.
Only four methods must be defined :

{{{
        /**
	 * Check if the current user has right to see this workflow
	 * 
	 * @param key
	 *            the key of the workflow
	 * @param cmsRequestContext
	 *            the request context
	 * @param parentFolder
	 *            the path of file
	 * @param propertyContainer
	 *            the property container of the instance of workflow
	 * @return <i>true</i> if the user is allow to see the workflow, <i>false</i> otherwise.
	 */
	protected abstract boolean hasReadRightOnWorkflow(WorkflowKey key, CmsRequestContext cmsRequestContext,
			String parentFolder, WorkflowPropertyContainer propertyContainer);

	/**
	 * Check if the current user has right to see this workflow
	 * 
	 * @param key
	 *            the key of the workflow
	 * @param cmsRequestContext
	 *            the request context
	 * @param parentFolder
	 *            the path of file
	 * @param propertyContainer
	 *            the property container of the instance of workflow
	 * @return <i>true</i> if the user is allow to see the workflow, <i>false</i> otherwise.
	 */
	protected abstract boolean hasWriteRightOnWorkflow(WorkflowKey key, CmsRequestContext cmsRequestContext,
			String parentFolder, WorkflowPropertyContainer propertyContainer);

	/**
	 * Check that the current user is the owner of the workplace. If this method return true, the own workflows of the
	 * creator will be displayed whatever its rights.
	 * 
	 * @param propertyContainer
	 *            the container of the property of the workflow
	 * @param name
	 *            the name of the current user
	 * @return <i>true</i> if the user is the owner of the instance of workflow, <i>false</i> otherwise
	 */
	protected abstract boolean checkOwner(WorkflowPropertyContainer propertyContainer, String name);

	/**
	 * Check if the current user has right to create this workflow
	 * 
	 * @param key
	 *            the key of the workflow
	 * @param cmsRequestContext
	 *            the request context
	 * @param listOfFiles
	 *            the list of initially selected files
	 * @return <i>true</i> if the user is allow to see the workflow, <i>false</i> otherwise.
	 */
	protected abstract boolean hasCreateRightOnWorkflow(WorkflowKey key, CmsRequestContext cmsRequestContext,
			List<String> fileList);

}}}

The WorkflowKey object contains the name of the selected workflow.
The WorkflowPropertyContainer object contains the list of Rights per branches.